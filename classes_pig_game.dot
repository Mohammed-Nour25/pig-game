digraph "classes_pig_game" {
rankdir=BT
charset="utf-8"
"pig_game.dice.Dice" [color="black", fontcolor="black", label=<{Dice|SIDES : Final[int]<br ALIGN="LEFT"/>sides : int<br ALIGN="LEFT"/>|roll(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.game.Game" [color="black", fontcolor="black", label=<{Game|active<br ALIGN="LEFT"/>active_index<br ALIGN="LEFT"/>current : int<br ALIGN="LEFT"/>goal : int<br ALIGN="LEFT"/>players : List[str]<br ALIGN="LEFT"/>scores : List[int]<br ALIGN="LEFT"/>turn_total<br ALIGN="LEFT"/>waiting<br ALIGN="LEFT"/>|cheat(): None<br ALIGN="LEFT"/>hold(): str<br ALIGN="LEFT"/>is_winner(index: Optional[int]): bool<br ALIGN="LEFT"/>roll(): int<br ALIGN="LEFT"/>switch_turn(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.highscore.HighScore" [color="black", fontcolor="black", label=<{HighScore|data : Dict[str, Any]<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>|add(entry: HighScoreEntry): None<br ALIGN="LEFT"/>add_game(p1_id: int, p2_id: int): None<br ALIGN="LEFT"/>add_result(p1_id: int, p2_id: int): None<br ALIGN="LEFT"/>record_result(player_id: int, opponent_id: int, result: str, score_for: int, score_against: int, duration_sec: int): None<br ALIGN="LEFT"/>register_player(name: str): int<br ALIGN="LEFT"/>rename_player(player_id: int, new_name: str): None<br ALIGN="LEFT"/>save(): None<br ALIGN="LEFT"/>table(): List[tuple]<br ALIGN="LEFT"/>top(limit: int): List[HighScoreEntry]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.highscore.HighScoreEntry" [color="black", fontcolor="black", label=<{HighScoreEntry|duration_sec : int<br ALIGN="LEFT"/>opponent : str<br ALIGN="LEFT"/>player : str<br ALIGN="LEFT"/>result : str<br ALIGN="LEFT"/>score_against : int<br ALIGN="LEFT"/>score_for : int<br ALIGN="LEFT"/>when_utc : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"pig_game.highscore.backup.HighScoreEntry" [color="black", fontcolor="black", label=<{HighScoreEntry|duration_sec : int<br ALIGN="LEFT"/>opponent : str<br ALIGN="LEFT"/>player : str<br ALIGN="LEFT"/>result : str<br ALIGN="LEFT"/>score_against : int<br ALIGN="LEFT"/>score_for : int<br ALIGN="LEFT"/>when_utc : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"pig_game.highscore.backup.HighScoreStore" [color="black", fontcolor="black", label=<{HighScoreStore|path : str<br ALIGN="LEFT"/>|add(entry: HighScoreEntry): None<br ALIGN="LEFT"/>top(limit: int): List[HighScoreEntry]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.intelligence.Intelligence" [color="black", fontcolor="black", label=<{Intelligence|EASY_THRESHOLD : Final[int]<br ALIGN="LEFT"/>NORMAL_THRESHOLD : Final[int]<br ALIGN="LEFT"/>level : str<br ALIGN="LEFT"/>|should_hold(turn_points: int, total_score: int, opponent_score: int, goal: int): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.shell.PigShell" [color="black", fontcolor="black", label=<{PigShell|do_EOF<br ALIGN="LEFT"/>game : NoneType, Optional[Game]<br ALIGN="LEFT"/>intro : str<br ALIGN="LEFT"/>prompt : str<br ALIGN="LEFT"/>|default(line: str): None<br ALIGN="LEFT"/>do_cheat(_: str): None<br ALIGN="LEFT"/>do_hold(_: str): None<br ALIGN="LEFT"/>do_name(arg: str): None<br ALIGN="LEFT"/>do_quit(_: str): bool<br ALIGN="LEFT"/>do_roll(_: str): None<br ALIGN="LEFT"/>do_rules(_: str): None<br ALIGN="LEFT"/>do_start(arg: str): None<br ALIGN="LEFT"/>do_status(_: str): None<br ALIGN="LEFT"/><I>emptyline</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.player.Player" [color="black", fontcolor="black", label=<{Player|name : str<br ALIGN="LEFT"/>total : int<br ALIGN="LEFT"/>turn : int<br ALIGN="LEFT"/>|add_points(points): None<br ALIGN="LEFT"/>add_roll(value: int): int<br ALIGN="LEFT"/>hold(): str<br ALIGN="LEFT"/>rename(new_name: str): None<br ALIGN="LEFT"/>reset(): None<br ALIGN="LEFT"/>reset_turn(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pig_game.game.Game" -> "pig_game.shell.PigShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="game", style="solid"];
"pig_game.game.Game" -> "pig_game.shell.PigShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="game", style="solid"];
}
